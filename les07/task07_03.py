# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток,
# соответственно.
#
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.
#
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
# и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются
# все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.

class Cell:
    el: int

    def __init__(self, el):
        self.el = el

    def make_order(self, el_in_rows: int):
        self.el_in_rows = el_in_rows
        row: str = ''
        temp_el = self.el
        while temp_el > self.el_in_rows:
            for i in range(self.el_in_rows):
                row += '*'
            row += '\\n'
            temp_el -= self.el_in_rows
        else:
            for i in range(temp_el):
                row += '*'
        print(row)

    def __add__(self, other):
        return Cell(self.el+other.el)

    def __sub__(self, other):
        if other.el>self.el:
            return f'Вычитание невозможно'
        else:
            return Cell(self.el-other.el)

    def __mul__(self, other):
        return Cell(self.el * other.el)

    def __truediv__(self, other):
        return Cell(self.el // other.el)


cell1 = Cell(12)
cell2 = Cell(7)
cell3 = cell1 + cell2
cell4 = cell1 - cell2
cell5 = cell1 * cell2
cell6 = cell1 / cell2
print('\nЭкземпляры клеток:')
cell1.make_order(5)
cell2.make_order(7)
print('\nСложение клеток:')
cell3.make_order(6)
print('\nВычитание клеток:')
cell4.make_order(6)
print('\nУмножение клеток:')
cell5.make_order(6)
print('\nДеление клеток:')
cell6.make_order(6)
